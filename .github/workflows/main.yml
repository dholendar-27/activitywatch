name: Build

on:
  push:
    branches: [ ttim_release ]
    tags:
      - v*
  pull_request:
    branches: [ ttim_release ]
  workflow_dispatch:
  #release:
  #  types: [published]

jobs:
  build:
    name: ${{ matrix.os }}, py-${{ matrix.python_version }}, node-${{ matrix.node_version }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    env:
      # Wether to build and include extras (like aw-notify and aw-watcher-input)
      AW_EXTRAS: true
      # sets the macOS version target, see: https://users.rust-lang.org/t/compile-rust-binary-for-older-versions-of-mac-osx/38695
      MACOSX_DEPLOYMENT_TARGET: 10.9
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest]
        python_version: [3.11.8]
        node_version: [18]
        skip_rust: [false]
        skip_webui: [false]
        experimental: [false]

        #include:
        #  - os: ubuntu-latest
        #    python_version: 3.9
        #    node_version: 16
        #    experimental: true

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0  # fetch all branches and tags

    # Build in release mode if: (longer build times)
    #  - on a tag (release)
    #  - on the master branch (nightly)
    - name: Set RELEASE
      run: |
        echo "RELEASE=${{ startsWith(github.ref_name, 'v') || github.ref_name == 'ttim_release' }}" >> $GITHUB_ENV

    - name: Set up Python
      if: runner.os != 'macOS'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}

    # Setup Python version built for older macOS (https://github.com/actions/virtual-environments/issues/1256)

    - name: Get npm cache dir
      id: npm-cache-dir
      run: |
        echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

    - uses: actions/cache@v3
      name: Cache npm
      if: ${{ !matrix.skip_webui }}
      env:
        cache-name: node
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.cache-name }}-


    - name: Install dependencies
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          choco install innosetup
        fi
        pip3 install poetry==1.3.2

    - name: Build
      run: |
        python3 -m venv venv
        source venv/bin/activate || source venv/Scripts/activate
        poetry install
        make build SKIP_WEBUI=${{ matrix.skip_webui }} SKIP_SERVER_RUST=${{ matrix.skip_rust }}
        pip freeze  # output Python packages, useful for debugging dependency versions

    - name: Run tests
      run: |
        source venv/bin/activate || source venv/Scripts/activate
        make test SKIP_SERVER_RUST=${{ matrix.skip_rust }}

    # Don't run integration tests on Windows, doesn't work for some reason
    - name: Run integration tests
      if: runner.os != 'Windows'
      run: |
        source venv/bin/activate || source venv/Scripts/activate
        make test-integration

    - name: Package
      run: |
        source venv/bin/activate || source venv/Scripts/activate
        poetry install  # run again to ensure we have the correct version of PyInstaller
        make package SKIP_SERVER_RUST=${{ matrix.skip_rust }}

  release:
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')  # only run on tag
    runs-on: ubuntu-latest
    steps:
      # Will download all artifacts to path
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: dist

      # detect if version tag is stable/beta
      - uses: ActivityWatch/check-version-format-action@v2
        id: version
        with:
          prefix: 'v'

      # create a release
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: dist/*/activitywatch-*.*
          body_path: dist/release_notes/release_notes.md
          prerelease: ${{ !(steps.version.outputs.is_stable == 'true') }}  # must compare to true, since boolean outputs are actually just strings, and "false" is truthy since it's not empty: https://github.com/actions/runner/issues/1483#issuecomment-994986996
