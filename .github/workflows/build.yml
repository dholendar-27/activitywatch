name: Build and Release

on:
  push:
    branches:
      - ttim_release
    tags:
      - 'v*'
  pull_request:
    branches:
      - ttim_release
  workflow_dispatch: # Manually trigger the release workflow

jobs:
  build:
    name: ${{ matrix.os }}, py-${{ matrix.python_version }}, node-${{ matrix.node_version }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    env:
      AW_EXTRAS: true
      MACOSX_DEPLOYMENT_TARGET: 10.9
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        python_version: [3.11.8]
        node_version: [18]
        skip_rust: [false]
        skip_webui: [false]
        experimental: [false]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Set RELEASE
        run: echo "RELEASE=${{ startsWith(github.ref_name, 'v') || github.ref_name == 'master' }}" >> $GITHUB_ENV

      - name: Set up Python
        if: runner.os != 'macOS'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}

      - name: Cache npm
        if: ${{ !matrix.skip_webui }}
        uses: actions/cache@v2
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            choco install innosetup
          fi
          pip install poetry==1.3.2

      - name: Build
        run: |
          python -m venv venv
          source venv/bin/activate || source venv/Scripts/activate
          poetry install
          make build SKIP_WEBUI=${{ matrix.skip_webui }} SKIP_SERVER_RUST=${{ matrix.skip_rust }}
          pip freeze

      - name: Run integration tests
        if: runner.os != 'Windows'
        run: |
          source venv/bin/activate || source venv/Scripts/activate
          make test-integration

      - name: Package
        run: |
          source venv/bin/activate || source venv/Scripts/activate
          poetry install
          make package

  release:
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Display structure of downloaded files
        run: ls -R dist

      - name: Check version format
        uses: ActivityWatch/check-version-format-action@v2
        id: version
        with:
          prefix: 'v'

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*/activitywatch-*.*
          body_path: dist/release_notes/release_notes.md
          draft: false
          prerelease: ${{ steps.version.outputs.is_stable != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  manual_release:
    name: Manual Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: []
    steps:
      - name: Trigger Manual Release
        id: manual_release
        run: echo "This workflow was triggered manually."

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*/activitywatch-*.*
          body_path: dist/release_notes/release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
