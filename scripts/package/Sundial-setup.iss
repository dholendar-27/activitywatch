; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Sundial"
#define MyAppVersion GetEnv('SD_VERSION')
#define MyAppPublisher "Sundial Contributors"
#define MyAppURL "https://Sundial.net/"
#define MyAppExeName "sd-qt.exe"
#define RootDir "..\.."
#define DistDir "..\..\dist"

#pragma verboselevel 9

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
; TODO: Should probably remove the extra leading {, but don't want to risk changing the AppId...
AppId={{F226B8F4-3244-46E6-901D-0CE8035423E4}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL="https://github.com/Sundial/Sundial/issues"
AppUpdatesURL="https://github.com/Sundial/Sundial/releases"
DefaultDirName={autopf}\{#MyAppName}
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
PrivilegesRequired=lowest
PrivilegesRequiredOverridesAllowed=dialog
OutputDir={#DistDir}
OutputBaseFilename=Sundial-setup
SetupIconFile="{#RootDir}\sd-qt\media\logo\logo.ico"
UninstallDisplayName={#MyAppName}
UninstallDisplayIcon={app}\{#MyAppExeName}
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "StartMenuEntry" ; Description: "Start Sundial when Windows starts"; GroupDescription: "Windows Startup"; MinVersion: 4,4;

[Files]
Source: "{#DistDir}\Sundial\sd-qt.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#DistDir}\Sundial\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[UninstallDelete]
Type: filesandordirs; Name: "{app}\*"
Type: filesandordirs; Name: "{userstartup}\{#MyAppName}.lnk"
; Add any additional uninstallation cleanup steps here, such as removing registry entries

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Comment: "Sundial";
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon; Comment: "Sundial";
Name: "{userstartup}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: StartMenuEntry; Comment: "Sundial";

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

; Removes the previously installed version before installing the new one
; NOTE: Doesn't work? And also discouraged by the docs

[InstallDelete]
Type: filesandordirs; Name: "{app}\"

[Code]
function IsProcessRunning(const AProcessName: string): Boolean;
var
  ResultCode: Integer;
begin
  // Use the tasklist command to check if the process is running
  Exec('cmd.exe', '/C tasklist /FI "IMAGENAME eq ' + AProcessName + '" | find /I "' + AProcessName + '"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
  
  // If find returns 0, the process is running
  Result := (ResultCode = 0);
end;

procedure StopApplication();
var
  ResultCode: Integer;
  ProcessesStopped: Boolean;
  MsgResult: Integer;
begin
  // Initialize the flag to track if any process was stopped
  ProcessesStopped := False;

  // Check and stop each process
  if IsProcessRunning('{#MyAppExeName}') then
  begin
    Exec('taskkill', '/F /IM {#MyAppExeName}', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    ProcessesStopped := True;
  end;

  if IsProcessRunning('sd-watcher-window.exe') then
  begin
    Exec('taskkill', '/F /IM sd-watcher-window.exe', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    ProcessesStopped := True;
  end;

  if IsProcessRunning('sd-watcher-afk.exe') then
  begin
    Exec('taskkill', '/F /IM sd-watcher-afk.exe', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    ProcessesStopped := True;
  end;

  if IsProcessRunning('sd-server.exe') then
  begin
    Exec('taskkill', '/F /IM sd-server.exe', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    ProcessesStopped := True;
  end;

  // Show message only if processes were stopped
  if ProcessesStopped then
  begin
    MsgResult := MsgBox('The application has been stopped successfully. Uninstallation will continue.', mbInformation, MB_OKCancel);
    if MsgResult <> IDOK then
    begin
      Abort;  // Abort the uninstallation process
    end;
  end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
  MsgResult: Integer;
begin
  if CurUninstallStep = usUninstall then
  begin
    MsgResult := MsgBox('Warning: This action will completely remove the application and its files.', mbInformation, MB_OKCancel);
    if MsgResult <> IDOK then
    begin
      Abort;  // Abort if the user cancels or closes the dialog
    end;

    StopApplication();
  end;
end;
